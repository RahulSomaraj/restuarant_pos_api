services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: restaurant-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-restaurant_db}
      POSTGRES_USER: ${POSTGRES_USER:-restaurant_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-restaurant_password}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - restaurant-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_USER:-restaurant_user} -d ${POSTGRES_DB:-restaurant_db}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:4.1-management-alpine
    container_name: restaurant-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-admin123}
    ports:
      - '5672:5672' # AMQP port
      - '15672:15672' # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - restaurant-network
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: apps/auth/Dockerfile
    container_name: restaurant-auth-service
    ports:
      - '3001:3001'
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://${POSTGRES_USER:-restaurant_user}:${POSTGRES_PASSWORD:-restaurant_password}@postgres:5432/${POSTGRES_DB:-restaurant_db}
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1d}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-admin123}@rabbitmq:5672
    volumes:
      - ./node_modules:/app/node_modules
      - ./apps/auth:/app/apps/auth
      - ./libs:/app/libs
      - ./package.json:/app/package.json
      - ./nest-cli.json:/app/nest-cli.json
      - ./tsconfig.json:/app/tsconfig.json
    networks:
      - restaurant-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # Restaurant API Service
  restaurant-api-service:
    build:
      context: .
      dockerfile: apps/restuarant-api/Dockerfile
    container_name: restaurant-api-service
    ports:
      - '3002:3002'
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://${POSTGRES_USER:-restaurant_user}:${POSTGRES_PASSWORD:-restaurant_password}@postgres:5432/${POSTGRES_DB:-restaurant_db}
      AUTH_SERVICE_URL: http://auth-service:3001
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD:-admin123}@rabbitmq:5672
    volumes:
      - ./node_modules:/app/node_modules
      - ./apps/restuarant-api:/app/apps/restuarant-api
      - ./libs:/app/libs
      - ./package.json:/app/package.json
      - ./nest-cli.json:/app/nest-cli.json
      - ./tsconfig.json:/app/tsconfig.json
    networks:
      - restaurant-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      auth-service:
        condition: service_started
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  restaurant-network:
    driver: bridge
